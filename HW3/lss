#!/bin/bash

# lss return a sorted list of all file in the current directory in decreasing order of bytes
# lss does not take in any argument, so extra argument passed in will raise "No Argument Needed" message
# lss calls ls -l command to list out the file and their information
# Then calls sort command to sort in reverse order, sort by integer on column 5, which is the column of byte information
# Lastly sed is called to remove the last line of ls -l, which show the total bytes count in the current directory
result=()
error=()
option=()
error1=()


if [ $# -eq 0 ]; 
then	
	ls -lS
	
else 
	for i in $@
	do 
		if [ -d $i ] || [ -f $i ];
		then
			result+=("$i")
			
		elif [[ $1 =~ ^[-].*$ ]] || [[ $1 =~ ^[-][-].*$ ]]
		then
			option+=("$i")
		else
			error+=("$i")
		fi
	done
	
	
	if [ ${#result[@]} -gt 1 ];
	then
		error1=$(ls -ldS ${option[*]} ${result[*]} ${error[*]} 2>/dev/null)
		if [ $? -gt 0 ];
		then
			if [ ${#error[@]} -eq 0 ];
			then	
				echo lss: The option entered is invalid: ${option[*]} >&2
			else
				echo lss: The file entered is invalid: $error >&2
			fi
		else
			ls -ldS ${option[*]} ${result[*]} ${error[*]}
		fi
	else
		error1=$(ls -lS ${option[*]} ${result[*]} ${error[*]} 2>/dev/null)
		if [ $? -gt 0 ];
		then
			if [ ${#error[@]} -eq 0 ];
			then	
				echo lss: The option entered is invalid: ${option[*]} >&2
			else
				echo lss: The file entered is invalid: ${error[*]} >&2
			fi
		else
			ls -lS ${option[*]} ${result[*]} ${error[*]}
		fi
	fi
fi
	








